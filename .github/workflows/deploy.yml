name: Run tests and publish to NuGet

on:
  push:
    branches:
      - master
      - dev
  pull_request:
    branches:
      - master
      - dev
  repository_dispatch:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Test
        run: dotnet test --no-build --verbosity normal

  publish-packages:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Determine version
        id: get-version
        run: |
          for csproj in $(find ./src -name "*.csproj"); do
            version=$(git tag --list --sort=-v:refname | grep -Eo "\d+\.\d+\.\d+" | head -n 1)
            if [ -z "$version" ]; then
              version="1.0.0"
            else
              IFS='.' read -r major minor patch <<< "$version"
              patch=$((patch + 1))
              version="$major.$minor.$patch"
            fi
            echo "Current version: $version"
            echo "##[set-output name=$csproj-version;]=\"$version\""
          done

      - name: Set version in csproj
        run: |
          for csproj in $(find ./src -name "*.csproj"); do
            version=${{ steps.get-version.outputs[${csproj}-version] }}
            sed -i "s|<Version>.*</Version>|<Version>$version</Version>|" $csproj
          done

      - name: Build packages
        run: dotnet pack --configuration Release

      - name: Publish packages
        run: |
          for nupkg in $(find ./src -name "*.nupkg"); do
            dotnet nuget push "$nupkg" -k $NUGET_API_KEY -s https://api.nuget.org/v3/index.json
          done

      - name: Tag the release
        run: |
          version=${{ steps.get-version.outputs[${csproj}-version] }}
          git tag -a "v$version" -m "Release version $version"
          git push origin --tags
