name: Build and deploy packages to NuGet

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - dev
      
permissions:
  contents: write

concurrency:
  group: nuget-publish-${{ github.ref }}
  cancel-in-progress: true
   
jobs:
  test:
    runs-on: ubuntu-latest
    #if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore src

      - name: Run tests
        run: dotnet test --no-restore src

  version-and-publish:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Cache NuGet dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.cs') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Increase version and tag
        id: version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for project in src/*/*.csproj; do
            if [[ "$project" == *"Tests.csproj" ]]; then
              continue
            fi
            project_name=$(basename $(dirname $project))
            current_version=$(git tag --list "${project_name}-v*" --sort=-v:refname | head -n 1 | sed 's/.*-v//')
            if [ -z "$current_version" ]; then
              new_version="1.0.0"
            else
              IFS='.' read -r major minor patch <<< "$current_version"
              if git diff --name-only HEAD^ HEAD | grep -q $project; then
                patch=$((patch + 1))
                new_version="$major.$minor.$patch"
              else
                new_version="$current_version"
              fi
            fi

            if [ "$new_version" != "$current_version" ]; then
              echo "Updating $project to version $new_version"
              dotnet pack $project -c Release /p:PackageVersion=$new_version
              git tag "${project_name}-v$new_version"
            fi
          done
          git push --tags

      - name: Publish NuGet packages
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          if ls src/*/bin/Release* 1> /dev/null 2>&1; then
            echo "pushing nupkg packets..."
            for nupkg in src/*/bin/Release/*.nupkg; do
              dotnet nuget push "$nupkg" -k $NUGET_API_KEY -s https://api.nuget.org/v3/index.json --skip-duplicate
            done
            echo "done!"
          else
            echo "There are no packages to send"
          fi
